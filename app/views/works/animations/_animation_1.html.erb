<script>
// Vague quantique de Roger Vilder / code p5.js by Alain Longuet --- Sept 2020 v.1 interactif
  let n = 15; // <<<<<<<<<<<< nombre de carrés
  let v = 0.6; // <<<<<<<<<< vitesse moyenne d'animation des carrés
  let tousLesCarrets = []; // liste des carrés

  let x = 0; let y = 0; // position des carrés
  let cc; //coté des carrés

  let f1 = 0.5; let f2 = 0.5; let f3 = 0.5; let f4 = 0.5;
  let tempo = 700; // temporisation de départ de chaque groupe
  let arretSurImage = false;
  let deplace = false;
  let zoom = 1;
  let deplaceX = 0; let deplaceY = 0;

  let positif = false;
  let couleurDeFond = 0;

  function setup() {
    frameRate(25);
    let fenetreAffichage = createCanvas(1200, 600);
    fenetreAffichage.parent('containerProcessing');
    cc = width / (2 * n);
    y = height / 2 - cc;
    background(0);
    fill(255);
    noStroke();
    f1 = random(v) + 0.5;
    f2 = random(v) + 0.5;
    f3 = random(v) + 0.5;
    f4 = random(v) + 0.5; // fréquence de balayage variable des 4 carrés
    for (let x = 0; x <= 1200; x = x + 2 * cc) {
      tousLesCarrets.push(new carret(cc, x + cc, y, 0, cc, -1, true));
      tousLesCarrets.push(new carret(cc, x + cc, y + cc, cc, 0, cc / 1.5, false));
      tousLesCarrets.push(new carret(cc, x, y + cc, cc, 0, 1, true));
      tousLesCarrets.push(new carret(cc, x + cc, y + cc, 0, cc, cc / 2, true));
    }
  }


  function draw() {

    background(couleurDeFond);

    for (let n = 0; n < width / (2 * cc); n = n + 1) {
      if (millis() > n * tempo + 1000) {
        translate(deplaceX, deplaceY);
        x = n * 2 * cc;
        tousLesCarrets[4 * n].anime1();
        tousLesCarrets[4 * n + 1].anime2();
        tousLesCarrets[4 * n + 2].anime3();
        tousLesCarrets[4 * n + 3].anime4();
        translate(-deplaceX, -deplaceY);
      }
    }
  }

  // Class des carrés animés

  class carret {
    constructor(c, ox, oy, cx, cy, i, ar) {
      this.c = c;
      this.ox = ox;
      this.oy = oy;
      this.cx = cx;
      this.cy = cy;
      this.i = i;
      this.ar = ar;

    }

    anime1() {
      this.animeSetup(f1)
      this.animationStart();
      scale(zoom);
      this.cx = -this.i;
      rect(this.ox, this.oy, this.cx, this.cy);
      scale(1 / zoom);
      this.animationEnd();
    }

    anime2() {
      this.animeSetup(f2)
      this.animationStart();
      scale(zoom);
      this.cy = -this.i;
      rect(this.ox, this.oy, this.cx, this.cy);
      scale(1 / zoom);
      this.animationEnd();
    }

    anime3() {
      this.animeSetup(f3)
      this.animationStart();
      scale(zoom);
      this.cy = this.i;
      rect(this.ox, this.oy, this.cx, this.cy);
      scale(1 / zoom);
      this.animationEnd();
    }

    anime4() {
      this.animeSetup(f4)
      this.animationStart();
      scale(zoom);
      this.cx = this.i;
      this.ox = x + this.c;
      rect(this.ox, this.oy, this.cx, this.cy);
      scale(1 / zoom);
      this.animationEnd();
    }

    animeSetup(f) {
          if (this.i <= this.c && this.ar == true) {
          if (arretSurImage == false) { this.i = this.i + f; }
          if (this.i >= this.c) { this.ar = false; }
        }
        if (this.i >= 0 && this.ar == false) {
          if (arretSurImage == false) { this.i = this.i - f; }
          if (this.i <= 0) { this.ar = true; }
        }
    }

    animationStart() {
      translate(-(width / 2) * (zoom - 1), -(height / 2) * (zoom - 1));
    }

    animationEnd() {
      translate((width / 2) * (zoom - 1), (height / 2) * (zoom - 1));
    }
  }

</script>
